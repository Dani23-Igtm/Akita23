import os
import time
import tempfile
from flask import Flask, render_template, request
import yt_dlp as youtube_dl
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import subprocess

app = Flask(__name__)


# Función para obtener las cookies como cadena en formato Netscape
def get_cookies_as_netscape_string(driver):
    cookies = driver.get_cookies()
    cookies_string = "# Netscape HTTP Cookie File\n"
    cookies_string += "# This file is generated by Selenium. Do not edit.\n\n"
    
    for cookie in cookies:
        cookies_string += (
            f"{cookie['domain']}\t"
            f"{'TRUE' if cookie['domain'].startswith('.') else 'FALSE'}\t"
            f"{cookie['path']}\t"
            f"{'TRUE' if cookie.get('secure', False) else 'FALSE'}\t"
            f"{cookie.get('expiry', 0)}\t"
            f"{cookie['name']}\t"
            f"{cookie['value']}\n"
        )
    
    return cookies_string

# Función para guardar las cookies como archivo temporal
def save_cookies_temp(cookies_string):
    cookies_file = tempfile.NamedTemporaryFile(delete=False, mode="w", encoding="utf-8")
    cookies_file.write(cookies_string)
    cookies_file.close()  # Guardamos las cookies en un archivo temporal
    return cookies_file.name  # Retornamos la ruta del archivo

# Función para ejecutar el comando de yt-dlp
def run_yt_dlp(cookies_path, referer, vimeo_url):
    # Ruta de la carpeta raíz del proyecto (directorio actual)
    output_path = os.getcwd()  # Obtener el directorio actual (raíz del proyecto)

    # El comando yt-dlp con los valores reemplazados y los parámetros que proporcionaste
    command = [
        "yt-dlp",
        f"--cookies={cookies_path}",  # Usamos el archivo de cookies generado
        f"--referer={referer}",
        "--concurrent-fragments=10",  # Descargar 10 fragmentos en paralelo
        "-o", os.path.join(output_path, "%(title)s.%(ext)s"),  # Guardamos en la raíz del proyecto
        "--hls-prefer-native",  # Usar el método preferido para HLS (si aplica)
        vimeo_url  # URL del video
    ]

    try:
        subprocess.run(command, check=True)
        print("[INFO] Video descargado exitosamente.")
        return True
    except subprocess.CalledProcessError as e:
        print(f"[ERROR] Error al ejecutar yt-dlp: {e}")
        return False

# Función para descargar el video (sin archivo de cookies)
def download_video(video_url):
    options = webdriver.ChromeOptions()
    options.add_argument("--headless")  # Ejecutar el navegador sin interfaz gráfica
    options.add_argument("--ignore-certificate-errors")  # Ignorar errores SSL
    options.add_argument("--no-sandbox")  # Desactivar sandbox
    options.add_argument("--disable-dev-shm-usage")  # Para entornos contenedores

    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

    try:
        # Navegar a la página de login
        login_url = "https://uc.osinergmin.gob.pe/login/index.php"
        driver.get(login_url)
        
        # Completar login (usuario y contraseña)
        username = "76075474"  # Usa un valor adecuado o pásalo como parámetro
        password = "perralacy28"  # Usa un valor adecuado o pásalo como parámetro
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, "username"))).send_keys(username)
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, "password"))).send_keys(password)
        driver.find_element(By.NAME, "password").send_keys("\n")
        time.sleep(2)  # Esperar para que la página cargue completamente

        # Navegar a la URL del video
        print("[INFO] Navegando a la URL del video...")
        driver.get(video_url)

        # Esperar explícitamente a que el iframe esté presente
        iframe = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, "iframe"))
        )
        vimeo_url = iframe.get_attribute("src")

        # Obtener las cookies como cadena en formato Netscape
        cookies_string = get_cookies_as_netscape_string(driver)

        # Guardar cookies en un archivo temporal
        cookies_file = save_cookies_temp(cookies_string)

        referer = video_url
        if run_yt_dlp(cookies_file, referer, vimeo_url):
            return True  

        return False  

    except Exception as e:
        print(f"[ERROR] Ocurrió un error: {e}")
        return False
    finally:
        driver.quit()

@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        video_url = request.form["video_url"]

        if download_video(video_url):
            return render_template("index.html", message="¡Descarga completa! El video se guardó en la carpeta raíz del proyecto.")
        else:
            return render_template("index.html", message="Error al descargar el video.")

    return render_template("index.html")

if __name__ == "__main__":
    app.run(debug=True, port=5001)
